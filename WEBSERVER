// Importar las bibliotecas necesarias
const express = require('express');   // Framework para crear aplicaciones web
const http = require('http');         // Módulo HTTP para crear el servidor web
const socketIo = require('socket.io'); // Biblioteca para WebSockets
const mysql = require('mysql2/promise'); // Biblioteca para interactuar con bases de datos MySQL

// Opciones de conexión a la base de datos
const connectionOptions = {
    host: 'localhost',  // Dirección del servidor MySQL
    user: 'Matt',       // Usuario de la base de datos
    password: '14241543', // Contraseña del usuario
    database: 'gps_data'  // Nombre de la base de datos
};

// Crear una instancia de la aplicación Express
const app = express();

// Crear un servidor HTTP utilizando la aplicación Express
const httpServer = http.createServer(app);

// Crear una instancia de Socket.IO asociada al servidor HTTP
const io = socketIo(httpServer);

// Función para conectar a la base de datos
async function connectToDB() {
    const connection = await mysql.createConnection(connectionOptions);
    return connection;
}

// Servir archivos estáticos desde la carpeta 'public'
app.use(express.static(__dirname + '/public'));

// Manejar eventos de conexión y desconexión de sockets
io.on('connection', (socket) => {
    console.log('Cliente conectado');

    socket.on('disconnect', () => {
        console.log('Cliente desconectado');
    });
});

// Ruta para obtener datos de ubicaciones desde la base de datos
app.get('/api/ubicaciones', async (req, res) => {
    try {
        const connection = await connectToDB();
        const [rows, fields] = await connection.execute('SELECT * FROM ubicaciones');
        console.log('Datos obtenidos de la base de datos:', rows);
        connection.end();

        res.status(200).json(rows);
    } catch (error) {
        console.error('Error al obtener los datos:', error);
        res.status(500).json({ message: 'Error en el servidor' });
    }
});

// Puerto del servidor web
const webServerPort = 3000;
httpServer.listen(webServerPort, () => {
    console.log(`Servidor web iniciado en http://localhost:${webServerPort}`);
});


